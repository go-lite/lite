# This file contains all available configuration options
# with their default values (in comments).
#
# This file is not a configuration example,
# it contains the exhaustive configuration with explanations of the options.

# Options for analysis running.
run:
  # The default concurrency value is the number of available CPU.
  #concurrency: 4

  # Timeout for analysis, e.g. 30s, 5m.
  # Default: 1m
  messageTTL: 5m

  # Exit code when at least one issue was found.
  # Default: 1
  issues-exit-code: 2

  # Include test files or not.
  # Default: true
  tests: false

  # List of build tags, all linters use it.
  # Default: [].
  #build-tags:
  #  - mytag

  # Which files to skip: they will be analyzed, but issues from them won't be reported.
  # Default value is empty list,
  # but there is no need to include all autogenerated files,
  # we confidently recognize autogenerated files.
  # If it's not please let us know.
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  #skip-files:
  #  - ".*\\.my\\.go$"
  #  - lib/bad.go

  # If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  #
  # Allowed values: readonly|vendor|mod
  # By default, it isn't set.
  modules-download-mode: readonly

  # Allow multiple parallel golangci-lint instances running.
  # If false (default) - golangci-lint acquires file lock on start.
  allow-parallel-runners: false

  # Define the Go version limit.
  # Mainly related to generics support since go1.18.
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.18
  # go: '1.21'


# output configuration options
output:
  # Format: colored-line-number|line-number|json|colored-tab|tab|checkstyle|code-climate|junit-xml|github-actions|teamcity
  #
  # Multiple can be specified by separating them by comma, output can be provided
  # for each of them by separating format name and path by colon symbol.
  # Output path can be either `stdout`, `stderr` or path to the file to write to.
  # Example: "checkstyle:report.xml,json:stdout,colored-line-number"
  #
  # Default: colored-line-number
  formats:
    - format: colored-line-number

  # Print lines of code with issue.
  # Default: true
  print-issued-lines: true

  # Print linter name in the end of issue text.
  # Default: true
  print-linter-name: true

  # Make issues output unique by line.
  # Default: true
  uniq-by-line: true

  # Add a prefix to the output file references.
  # Default is no prefix.
  path-prefix: ""

  # Sort results by: filepath, line and column.
  sort-results: true


linters:
  # Disable all linters.
  # Default: false
  disable-all: true
  # Enable specific linter
  # https://golangci-lint.run/usage/linters/#enabled-by-default
  enable:
    - asasalint
    - asciicheck
    - bidichk
    - bodyclose
    #- containedctx
    - contextcheck
    #- cyclop
    #- deadcode
    - decorder
    #- depguard
    #- dogsled
    # - dupl # TODO: enable
    # - dupword
    - durationcheck
    - errcheck
    - errchkjson
    - errname
    - errorlint
    #    - execinquery
    - exhaustive
    #- exhaustivestruct
    #- exhaustruct
    - exportloopref
    #- forbidigo
    #- forcetypeassert
    #- funlen
    #- gci
    - ginkgolinter
    - gocheckcompilerdirectives
    #- gochecknoglobals
    - gochecknoinits
    - gochecksumtype
    #- gocognit
    #- goconst
    - gocritic
    #- gocyclo
    #- godot
    - godox
    #- goerr113
    - gofmt
    - gofumpt
    - goheader
    - goimports
    #- golint
    #- gomnd
    - gomoddirectives
    - gomodguard
    - goprintffuncname
    #- gosec
    - gosimple
    - gosmopolitan
    - govet
    - grouper
    #- ifshort
    - importas
    #- inamedparam
    - ineffassign
    #- interfacebloat
    #- interfacer
    #- ireturn
    - lll
    - loggercheck
    - maintidx
    - makezero
    #- maligned
    - mirror
    #- misspell
    - musttag
    #- nakedret
    #- nestif
    - nilerr
    #- nilnil
    #- nlreturn
    - noctx
    - nolintlint
    #- nonamedreturns
    #- nosnakecase
    - nosprintfhostport
    #- paralleltest
    - perfsprint
    - prealloc
    - predeclared
    #- promlinter
    #- protogetter
    - reassign
    - revive
    - rowserrcheck
    #- scopelint
    - sloglint
    - sqlclosecheck
    - staticcheck
    #- structcheck
    - stylecheck
    - tagalign
    #- tagliatelle
    - tenv
    - testableexamples
    - testifylint
    #- testpackage
    - thelper
    - tparallel
    - typecheck
    - unconvert
    - unparam
    - unused
    - usestdlibvars
    #- varcheck
    #- varnamelen
    - wastedassign
    - whitespace
    #- wrapcheck
    - wsl
    - zerologlint
  fast: false

issues:
  exclude:
    - don't use an underscore in package name
    - should not use underscores in package names
  # Which dirs to skip: issues from them won't be reported.
  # Can use regexp here: `generated.*`, regexp is applied on full path,
  # including the path prefix if one is set.
  # Default value is empty list,
  # but default dirs are skipped independently of this option's value (see skip-dirs-use-default).
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  exclude-dirs:
    - tmp
    - bin
    - githooks
    - tests

  # Enables skipping of directories:
  # - vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  # Default: true
  exclude-dirs-use-default: false

linters-settings:
  lll:
    line-length: 140
  revive:
    confidence: 0.1
  wsl:
    allow-cuddle-declarations: true
  govet:
    enable-all: true
    disable:
      - fieldalignment
